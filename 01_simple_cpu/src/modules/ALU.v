// ALU.v

// This module performs ALU operations according to the "alu_func" value,
// which is generated by the ALU control unit.
// Note that there exist 10 R-type instructions in RV32I:
// add, sub, xor, or, and, sll, srl, sra, slt, sltu

`include "defines.v"

module ALU 
#(parameter DATA_WIDTH = 32)(
  input [DATA_WIDTH-1:0] in_a, 
  input [DATA_WIDTH-1:0] in_b,
  input [3:0] alu_func,
  input [2:0] funct3,

  output reg [DATA_WIDTH-1:0] result,
  output reg check 
);

// combinational logic 
always @(*) begin
  case (alu_func)
    `OP_ADD:  result = in_a +  in_b; 
    `OP_SUB:  result = in_a -  in_b;
    `OP_XOR:  result = in_a ^  in_b;
    `OP_OR:   result = in_a |  in_b;
    `OP_AND:  result = in_a &  in_b;

    //////////////////////////////////////////////////////////////////////////
    // TODO : Add other operations
    // - The example below is given as a hint
    // - `OP_SRA: result = $signed(in_a) >>> in_b[4:0];
    //////////////////////////////////////////////////////////////////////////
    `OP_SLL: result = in_a << in_b;
    `OP_SRL: result = in_a >>> in_b;
    `OP_SRA: result = $signed(in_a) >>> $signed(in_b);
    `OP_SLT: result = ($signed(in_a) < $signed(in_b))? 32'h0000_0001:32'h0000_0000;
    `OP_SLTU: result = (in_a < in_b)?32'h0000_0001:32'h0000_0000;
    default:  result = 32'h0000_0000;
  endcase
end
// combinational logic
always @(*) begin
  case (alu_func)
    //////////////////////////////////////////////////////////////////////////
    // TODO : Generate check signal
    //////////////////////////////////////////////////////////////////////////
    `OP_SUB: begin
      casex (funct3) 
        3'b000: check = (result == 0)? 1'b1:1'b0; //beq
        3'b001: check = (result == 0)? 1'b0:1'b1; //bne
        3'b1x0: check = (result[DATA_WIDTH-1]==1'b1)? 1'b1:1'b0; //blt
        3'b1x1: check = (result[DATA_WIDTH-1]==1'b1)? 1'b0:1'b1; //bge
      endcase
    end
    default:  check = 1'b0;
  endcase
end
endmodule
